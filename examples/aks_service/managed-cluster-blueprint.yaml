tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint create a managed cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - plugin:cloudify-azure-plugin
  - plugin:cloudify-kubernetes-plugin

inputs:
  # Azure account information
  subscription_id:
    type: string
    required: false

  tenant_id:
    type: string
    required: false

  client_id:
    type: string
    required: false

  client_secret:
    type: string
    required: false

  location:
    type: string
    required: true
    default: westus

  resource_group_name:
    type: string
    default: aks-test-rg

  managed_cluster_name:
    type: string
    default: aks-test-mc

  public_key:
    type: string
    default: ''

  service_account_name:
    type: string
    default: examples-user

  service_account_namespace:
    type: string
    default: default

dsl_definitions:
  azure_config: &azure_config
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }

  resource_config: &resource_config
    location: { get_input: location }
    tags:
      Name: "AKS_Test"
      tier: "Testing"
    kubernetes_version: ""
    dns_prefix: "akstest"
    agent_pool_profiles:
      - name: "nodepool1"
        count: 3
        vmSize: "Standard_DS1_v2"
        osType: "Linux"
        type: "VirtualMachineScaleSets"
        availabilityZones:
          - "1"
          - "2"
          - "3"
        enableNodePublicIP: true
    linux_profile:
      adminUsername: "azureuser"
      ssh:
        publicKeys:
          - keyData : { get_input: public_key }
    network_profile:
      loadBalancerSku: "standard"
      outboundType: "loadBalancer"
      loadBalancerProfile:
        managedOutboundIPs:
          count: 2
    windows_profile:
      adminUsername: "azureuser"
      adminPassword: "az#1234"
    service_principal_profile:
      clientId: { get_input: client_id }
      secret: { get_input: client_secret }
    addon_profiles: {}
    enable_rbac: true


node_templates:

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: { get_input: resource_group_name }
      location: { get_input: location }
      azure_config: *azure_config

  managed_cluster:
    type: cloudify.azure.nodes.compute.ManagedCluster
    properties:
      resource_group: { get_input: resource_group_name }
      cluster_name: { get_input: managed_cluster_name }
      resource_config: *resource_config
      azure_config: *azure_config
      store_kube_config_in_runtime: true
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_attribute: [ managed_cluster, kubeconf ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: managed_cluster

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: { get_input: service_account_name }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master

  secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: {get_attribute: [new_service_account, kubernetes, secrets, 0, name]}
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_role_binding
      - type: cloudify.relationships.depends_on
        target: new_service_account

  store_token:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token.py
          executor: central_deployment_agent
          inputs:
            kube_token: {get_attribute: [secret, kubernetes, data, token ]}
    relationships:
      - type: cloudify.relationships.depends_on
        target: secret
