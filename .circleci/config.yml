version: 2

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi

jobs:

  unittests:
    machine:
      enabled: true
      python:
        version: pypy-2.2.1
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: pip install --upgrade pip==9.0.1
      - run:
          name: install tox
          command: pip install tox
      - run: tox -e flake8
      - run: tox -e py27

  wagon:
    docker:
      - image: amd64/centos:centos7.3.1611
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum -y install python-devel gcc openssl git libxslt-devel libxml2-devel openldap-devel libffi-devel openssl-devel libvirt-devel
      - run:
          name: Download pip
          command: curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
      - run:
          name: Install pip
          command: python get-pip.py
      - run:
          name: Upgrade pip
          command: pip install --upgrade pip==9.0.1
      - run:
          name: Install virtualenv
          command: pip install virtualenv==15.1.0
      - run:
          name: Init virtualenv
          command: virtualenv env
      - run:
          name: Install wagon
          command: pip install wagon==0.3.2
      - run:
          name: many_linux
          command: echo "manylinux1_compatible = False" > "env/bin/_manylinux.py"
      - run:
          name: make workspace
          command: mkdir -p workspace/build
      - run:
          name: Create wagon
          command: source env/bin/activate && wagon create -s . -v -o workspace/build -f -a '--no-cache-dir -c constraints.txt'
      - persist_to_workspace:
          root: workspace
          paths:
            - build/*

  cloudify-manager:
    machine:
      enabled: true
      python:
        version: pypy-2.2.1
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Upgrade pip
          command: pip install --upgrade pip==9.0.1
      - run:
          name: Add Azure Repo Part one # Cloudify and Azure have conflicts in PyPI
          command: echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" > azure-cli.list
      - run:
          name: Add Azure Repo Part Two # Cloudify and Azure have conflicts in PyPI
          command: sudo mv azure-cli.list /etc/apt/sources.list.d/
      - run:
          name: Download Azure Key # Cloudify and Azure have conflicts in PyPI
          command: curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
      - run:
          name: Install apt-transport-https # Cloudify and Azure have conflicts in PyPI
          command: sudo apt-get install apt-transport-https
      - run:
          name: Install Azure CLI # Cloudify and Azure have conflicts in PyPI
          command: sudo apt-get update && sudo apt-get install azure-cli
      - run:
          name: install cloudify
          command: pip install cloudify==4.3.2
      - run:
          name: install azure plugin from branch
          command: pip install -e .
      - run:
          name: install test requirements
          command: pip install nose testtools https://github.com/cloudify-cosmo/cloudify-fabric-plugin/archive/1.5.1.zip https://github.com/cloudify-incubator/cloudify-utilities-plugin/archive/1.7.1.zip https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/cd624d0f7eaf67ce998ea7b70fbc9b6c7f7c0398.zip
      - run:
          name: initialize az cli
          command: az login --service-principal -u $AZURE_CLI_ID -p $AZURE_CLI_SE --tenant $AZURE_TEN_ID > /dev/null 2>&1
      - run:
          name: execute test
          command: nosetests -s manager_tests/test_azure.py

  py3_compat:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: install futurize
          command: pip install future --user
      - run:
          name: find python3-incompatible code
          command: |
            FUTURIZE="futurize ."
            while read line; do
              [[ "$line" =~ ^#.* ]] && continue
              FUTURIZE="${FUTURIZE} ${line}"
            done<.circleci/py3fixers
            echo "Running: $FUTURIZE"
            $FUTURIZE>futurize_diffs
      - run:
          name: check that there is no python3-incompatible code
          command: |
            if [[ -s futurize_diffs ]]; then
              echo "Python-3-incompatible code found"
              cat futurize_diffs
              exit 1
            fi

workflows:
  version: 2
  tests:
    jobs:
      - py3_compat
      - unittests
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - cloudify-manager:
          context: ecosystem
          requires:
            - wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
  nightly:
    triggers:
    - schedule:
        cron: "0 0 * * *"
        filters:
          branches:
            only:
              - master
    jobs:
      - unittests
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - cloudify-manager:
          context: ecosystem
          requires:
            - wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
